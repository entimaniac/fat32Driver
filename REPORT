Project 3 Report

============================
Problem statement:
============================
For this project, you will design and implement a simple, user-space, shell-like
utility that is capable of interpreting a FAT32 file system image. The program
must understand the basic commands to manipulate the given file system image. 
The utility must not corrupt the file system image and should be robust. You may
not reuse kernel file system code, and you may not copy code from other file
system utilities (or from anywhere else over the internet, to be precise).

============================
Steps taken to solve problem
============================
James began work on the project almost immediately. He then caught the rest of
group up to what he had accomplished. He explained what functions needed to be
completed and ideas for accomplishing them. The remaining members were then able
contribute to the project and wrap up the remaining work.

============================
Assumptions
============================
- ls does not require a no parameter case
- 67MB for the image is adequate for testing and submission


============================
System Calls
============================
- Program takes place in userspace, no direct system calls used.

============================
Problems
============================
- The Thanksgiving holiday occured near the end of the project, during the time
when the work was most underway, leading to poor communication and busy holiday 
plans.
- The project was heavily developed by a single member in the beginning, so the
other members had to catch up to speed after the fact.


============================
Known Bugs
============================
- Some commands (exit) require either an extra space or two 'enters' 
before executing
- can "open" files that do not exist
-- can "read" and "write" to these files; effects undefined
- opening a file that shares the same name of another file prevents "opening" of
that other file, however, both can be written to and read from if just one is
opened in the appropriate mode.
- cannot write leading spaces
- cannot create a file with the same name as a directory if it already exists in
the same folder and vise versa
- rmdir never sees dir as empty due to oversight in error checking and therefore
it will not remove any directories


============================
Division of Labor
============================
James:
Tested code;
Worked in:
	cd.h
	create.h
	ls.h;
	mkdir
	open.h;
	p3.c;
	read.h
	rm.h
	rmdir.h
	stack.c
	stack.h
	util.h
	util.c
	vector.c
	vector.h

Stefan:
Tested code;
Worked in:
	makefile
	size.h
	util.c
	write.h
	
Jesse:
Tested code;
Created and maintained documentation;
Worked in:
	README
	REPORT
	open.h
	util.h
	util.c


============================
Slack Day Used
============================
James:	2 days
Stefan:	2 days
Jesse:	2 days


============================
Log
============================
Sat, December 5:
	Jesse finalizes documentations.
	Stefan works one final bug.
	Project submitted. 
	
Fri, December 4:
	James adds mkdir functionality.
	Jesse fixes a bug preventing expected functionality.


Thu, December 3:
	James finalizes create functionality.
	Jesse fixes a minor bug in util.c; updates documentation.


Wed, December 2:
	James adds rmdir funtion. 
	Jesse updates documentation.

Tue, December 1:
	James updates create to work better;  adds rm functionality.
	Jesse runs series of tests and reports bug; updates documentation.

Mon, November 30: 
	Stefan updates Util.c to work with size function; adds work to write functionality.
	James adds create funtionality.
	
Sun, November 29: 
	Stefan finishes size function; begins write functionality. 
	Jesse shares documentation; adds code to prevent segmentation faults to util.c.

Sat, November 28: 
	James adds read functionality and fixes bugs.
	Jesse creates documentation.

Fri, November 27: 
	Stefan creates makefile; begins working on size function.

Wed, November 25: 
	James adds cd functionality.

Tue, November 24: 
	James corrects some functions.

Fri, November 20: 
	James adds more base functionality.

Wed, November 18: 
	James pushes initial git commit on github.

Mon, November 2: 
	James begins work on project.

Fri, October 30: 
	Project 3 assigned.
